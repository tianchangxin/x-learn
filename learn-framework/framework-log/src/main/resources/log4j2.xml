<?xml version="1.0" encoding="utf-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration monitorInterval="30">
    <!--https://logging.apache.org/log4j/2.x/manual/appenders.html-->
    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <!-- 配色教程 %style{内容}{颜色} -->
        <property name="CLASS_PATH" value="%style{%C{1}.%M}{blue}"/>
        <property name="TIME" value="%d{yyyy-MM-dd HH:mm:ss.SSS}"/>
        <property name="LOG_PATTERN" value="${TIME} [%thread] %-5level &lt;x-learn&gt; ${CLASS_PATH} LINE:%L - %msg%xEx%n" />

        <!-- 定义日志存储的路径 -->
<!--        <property name="FILE_PATH" value="/Users/tiancx/work/" />-->
<!--        <property name="FILE_NAME" value="learn_log_info" />-->
    </Properties>
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="${LOG_PATTERN}"/>
        </Console>


<!--        <RollingFile name="RollingFile" fileName="${FILE_PATH}/${FILE_NAME}.log"-->
<!--                     filePattern="${FILE_PATH}/${FILE_NAME}-%d{yyyy-MM-dd}.log">-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level &lt;%X{apmTrace}&gt; &lt;marketanalysis-dev&gt;  &lt;%c{1}&gt; &lt;%M&gt; &lt;%X{filter1}&gt;  &lt;%X{filter2}&gt; LINE:%L - %msg%xEx%n" />-->
<!--            <Policies>-->
<!--                &lt;!&ndash; 每1天更新一次，此处查阅网上和官方示例中，都是以小时出现，我测试是以天为单位。（官方文档中说明按item类型是否是小时，但没找到在哪里设置item类型）另有其他各类型策略，请参阅官方文档 &ndash;&gt;-->
<!--                &lt;!&ndash; TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时-->
<!--                ，生成新的文件保存日志。 &ndash;&gt;-->
<!--                <TimeBasedTriggeringPolicy modulate="true"-->
<!--                                           interval="1" />-->
<!--                &lt;!&ndash; 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 &ndash;&gt;-->
<!--                &lt;!&ndash; <SizeBasedTriggeringPolicy size="128KB" /> &ndash;&gt;-->
<!--            </Policies>-->
<!--            &lt;!&ndash; 最多备份30天以内的日志，此处为策略限制，Delete中可以按自己需要用正则表达式编写 &ndash;&gt;-->
<!--            &lt;!&ndash; DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量，并没有发现是网上流传的是最多保存多少个文件的限制，也或许是我写的有问题 &ndash;&gt;-->
<!--            <DefaultRolloverStrategy>-->
<!--                <Delete basePath="${FILE_PATH}" maxDepth="1">-->
<!--                    <IfFileName glob="${FILE_NAME}-*.log" />-->
<!--                    <IfLastModified age="1d" />-->
<!--                </Delete>-->
<!--            </DefaultRolloverStrategy>-->
<!--        </RollingFile>-->
    </Appenders>
    <Loggers>
        <!--includeLocation : Extracting location is an expensive operation (it can make logging 5 - 20 times slower)-->
        <asyncRoot  level="INFO" includeLocation="true">
<!--            如果需要保存到文件，加上下面这行-->
<!--            <AppenderRef ref="RollingFile" />-->
            <AppenderRef ref="Console" />
        </asyncRoot >
        <logger name="com.alibaba.druid.pool.DruidAbstractDataSource" level="info"/>
    </Loggers>
</Configuration>
